---

name: Формы
theory: |
  Про Lisp-подобные языки говорят, что у этих языков нет синтаксиса. Синтаксис у них конечно есть, но максимально примитивный, фактически состоящий из списков и значений. Кроме того, в лиспах отсутствуют ключевые слова и соответствующие им конструкции. В обычных языках существует множество управляющих конструкций, таких как условия, циклы, возврат, присвоение переменных и многое другое. В лиспоподобных языках таких конструкций нет (это не значит, что на Clojure нельзя реализовать цикл или написать условие — можно!)

  Каким же образом Clojure понимает, с чем сейчас он работает и что нужно делать? Все дело в _формах_. Любая корректная программа на Lisp называется _формой_. Например:

  ```clojure
  ;формы
  (println "some-str")
  (+ 1 2 3)
  (- 3)
  8
  "hello world!"

  ; а это не форма, такой код завершится ошибкой
  (1 2)
  ```

  Форм всего две — нормальная и составная. Нормальной соответствуют все значения (и определения, с которыми мы познакомимся позже), так как они вычисляются сами в себя, например, число _8_ или строка "hello". Составная форма — это список, который нужно обработать тем или иным способом (вычислить).

instructions: |
  Выведите в стандартный поток вывода (с помощью функции `println`) следующее выражение: - 23 * (- 3) + 15
tips: []
